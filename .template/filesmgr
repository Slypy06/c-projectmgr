#!/bin/bash

# Function to print usage information
usage() {
    echo "Usage: $0 {create|remove|edit-main} [options]"
    echo "Modes:"
    echo "  create FILE_NAME [-p package]"
    echo "  remove FILE_NAME"
    echo "  edit-main NEW_MAIN_FILE"
    exit 1
}

# Function to update files.json
update_files_json() {
    local main_file="$1"

    # Update files.json with new main file
    jq --arg main_file "$main_file" '.main_file = $main_file' files.json > files_tmp.json && mv files_tmp.json files.json
}

# Function to create a new file
create_file() {
    local file_name="$1"
    local package=""
    shift

    # Parse optional arguments
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -p) package="$2"; shift 2 ;;
            *) usage ;;
        esac
    done

    # Construct the package path
    local package_path=""
    if [[ -n "$package" ]]; then
        package_path="${package//./\/}"
    fi

    # Construct file paths
    local file_path="src/$package_path/$file_name"
    local header_path="src/.include/$package_path/$file_name"
    local c_file="$file_path.c"
    local h_file="$header_path.h"

    # Check if the files already exist
    if [[ -f "$c_file" || -f "$h_file" ]]; then
        echo "File '$file_name' already exists."
        exit 1
    fi

    mkdir -p "src/$package_path"
    mkdir -p "src/.include/$package_path"

    # Create .c and .h files with basic content
    if[["$package_path" == ""]]; then
        echo "#include \"${file_name}.h\"" > "$c_file"
    else
        echo "#include \"${package_path}/${file_name}.h\"" > "$c_file"
    fi

    echo "/* Header file for $file_name */" > "$h_file"
    
    # Update files.json
    jq --arg file "${file_path}.c" '.aux_files += [$file]' files.json > files_tmp.json && mv files_tmp.json files.json
}

# Function to remove a file
remove_file() {
    local file_name="$1"

    local main_file=$(jq -r '.main_file' files.json)
    local file_path="src/${file_name}"
    local header_path="src/.include/${file_name}"

    if [[ "$file_path.c" == "${main_file}" ]]; then
        echo "Cannot remove the main file."
        exit 1
    fi

    local c_file="$file_path.c"
    local h_file="$header_path.h"

    if [[ ! -f "$c_file" ]]; then
        echo "File '$file_name.c' does not exist."
        exit 1
    fi

    read -p "Are you sure you want to remove '$file_name'? This may affect dependencies. (y/n) " confirm
    if [[ "$confirm" == "y" ]]; then
        rm -f "$c_file" "$h_file"
        jq --arg file "${file_path}.c" 'del(.aux_files[] | select(. == $file))' files.json > files_tmp.json && mv files_tmp.json files.json
    else
        echo "File removal aborted."
    fi
}

# Function to edit the main file
edit_main_file() {
    local new_main_file="$1"

    local current_main_file=$(jq -r '.main_file' files.json)

    if [[ ! -f "src/$new_main_file" ]]; then
        echo "The new main file '$new_main_file' does not exist."
        exit 1
    fi

    if [[ "$current_main_file" == "$new_main_file" ]]; then
        echo "The new main file is the same as the current one."
        exit 1
    fi

    read -p "Do you want to remove the old main file or put it in the aux files list? (remove/aux) " action

    if [[ "$action" == "remove" ]]; then
        if [[ "$current_main_file" != "" ]]; then
            rm -f "src/${current_main_file}"
            jq --arg file "src/${current_main_file}" 'del(.aux_files[] | select(. == $file))' files.json > files_tmp.json && mv files_tmp.json files.json
        fi
    elif [[ "$action" == "aux" ]]; then
        jq --arg file "src/$current_main_file" '.aux_files += [$file]' files.json > files_tmp.json && mv files_tmp.json files.json
    else
        echo "Invalid action."
        exit 1
    fi

    # Update the main file to the new one
    update_files_json "$new_main_file"

    if jq -e --arg file "src/$new_main_file" '.aux_files | index($file)' files.json >/dev/null; then
        rm -f "src/${new_main_file}"
    fi
}

# Main script logic
if [[ $# -lt 1 ]]; then
    usage
fi

mode="$1"
shift

case $mode in
    create) create_file "$@" ;;
    remove) remove_file "$@" ;;
    edit-main) edit_main_file "$@" ;;
    *) usage ;;
esac
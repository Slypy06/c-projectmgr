#!/bin/bash

# Function to print usage information
usage() {
    echo "Usage: $0 {create|remove|edit-main} [options]"
    echo "Modes:"
    echo "  create FILE_NAME [-p package]"
    echo "  remove FILE_NAME"
    echo "  edit-main NEW_MAIN_FILE"
    echo "  install LIB_NAME"
    exit 1
}

# Function to update files.json
update_files_json() {
    local main_file="$1"

    # Update files.json with new main file
    jq --arg main_file "$main_file" '.main_file = $main_file' files.json > files_tmp.json && mv files_tmp.json files.json
}

download_folder() {
  local api_url="$1"
  local dest_dir="$2"

  # Make sure the destination directory exists
  mkdir -p "$dest_dir"

  # Get the list of files/folders from the GitHub API
  response=$(curl -s "$api_url")

  # Loop through each element in the JSON response
  echo "$response" | jq -c '.[]' | while read -r item; do
    # Extract name, type, and download URL
    name=$(echo "$item" | jq -r '.name')
    type=$(echo "$item" | jq -r '.type')
    download_url=$(echo "$item" | jq -r '.download_url')

    # If the element is a file, download it
    if [ "$type" == "file" ]; then
        echo "Downloading file: $name to $dest_dir"
        curl -s "$download_url" -o "$dest_dir/$name"

        if [[ "$name" == *.c ]]; then
            echo "Adding $dest_dir/$name to files.json aux_files."
            updated_files_json=$(jq --arg file "$dest_dir/$name" '.aux_files += [$file]' files.json)
            echo "$updated_files_json" > files.json
        fi

    elif [ "$type" == "dir" ]; then
      # If the element is a directory, recursively download its contents
      echo "Entering directory: $name"
      download_folder "$api_url/$name" "$dest_dir/$name"
    fi
  done
}

install_lib() {

    if [ -z "$1" ]; then
    echo "Usage: $0 <folder_name>"
    exit 1
    fi

    # Set the folder name from the first argument
    FOLDER_NAME="$1"

    INFO_FILE="info.json"
    FILES_JSON="files.json"

    # URL to check the contents of the /libs directory
    GITHUB_API_URL="https://api.github.com/repos/Slypy06/c-projectmgr/contents/libs"
    GITHUB_RAW_URL="https://raw.githubusercontent.com/Slypy06/c-projectmgr/main/libs/$FOLDER_NAME/info.json"

    MACRO_DIR="src/.macro"
    INCLUDE_DIR="src/.include"
    SRC_DIR="src"

    # Get the list of folders from the GitHub API
    response=$(curl -s "$GITHUB_API_URL")

    # Check if the folder exists in the response
    folder_exists=$(echo "$response" | jq -r --arg folder "$FOLDER_NAME" '.[] | select(.name == $folder) | .name')

    if [ "$folder_exists" == "$FOLDER_NAME" ]; then
        echo "Folder '$FOLDER_NAME' found in the repository."
        
        # Download the corresponding info.json file from the raw URL
        info_json=$(curl -s "$GITHUB_RAW_URL")

        if [ -z "$info_json" ]; then
            echo "Failed to fetch info.json from $GITHUB_RAW_URL"
            exit 1
        fi

        # Check if the local info.json exists
        if [ ! -f "info.json" ]; then
            echo "Local info.json not found, creating a new one."
            echo '{"libs": []}' > info.json
        else
            if jq -e --arg folder "$FOLDER_NAME" '.libs | map(select(.name == $folder)) | length > 0' "$INFO_FILE" > /dev/null; then
                echo "Library '$FOLDER_NAME' is already installed in $INFO_FILE."

                installed_version=$(jq -r --arg folder "$FOLDER_NAME" '.libs[] | select(.name == $folder) | .version' "$INFO_FILE")
                repo_version=$(echo "$info_json" | jq -r '.version')

                echo "Installed version: $installed_version"
                echo "Repository version: $repo_version"

                # Compare versions
                if [ "$installed_version" != "$repo_version" ]; then
                    echo "Versions differ. Removing old entry from $INFO_FILE."
                    
                    # Remove the existing library entry from info.json
                    updated_info_json=$(jq --arg folder "$FOLDER_NAME" 'del(.libs[] | select(.name == $folder))' "$INFO_FILE")
                    echo "$updated_info_json" > "$INFO_FILE"
                else
                    echo "Library is up to date."
                    exit 0
                fi
            fi
        fi

        # Add the downloaded info.json to the "libs" attribute in the local info.json
        updated_json=$(jq --argjson new_lib "$info_json" '.libs += [$new_lib]' info.json)

        # Save the updated JSON back to the local info.json file
        echo "$updated_json" > info.json

        echo "info.json updated successfully."

        lib_type=$(echo "$info_json" | jq -r '.type')

        # Handle based on the library type (macro or code)
        if [ "$lib_type" == "macro" ]; then
            echo "Library type is 'macro'. Copying header files to $MACRO_DIR."

            # Download header files to src/.macro
            download_folder "$GITHUB_API_URL/$FOLDER_NAME/header" "$MACRO_DIR"

        elif [ "$lib_type" == "code" ]; then
            echo "Library type is 'code'. Copying header files to $INCLUDE_DIR and source files to $SRC_DIR."

            # Download header files to src/.include
            download_folder "$GITHUB_API_URL/$FOLDER_NAME/header" "$INCLUDE_DIR"

            # Download source files to src
            download_folder "$GITHUB_API_URL/$FOLDER_NAME/source" "$SRC_DIR"
        else
            echo "Unknown library type: $lib_type"
            exit 1
        fi

    else
    echo "Folder '$FOLDER_NAME' not found in the repository."
    exit 1
    fi

}

# Function to create a new file
create_file() {
    local file_name="$1"
    local package=""
    shift

    # Parse optional arguments
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -p) package="$2"; shift 2 ;;
            *) usage ;;
        esac
    done

    # Construct the package path
    local package_path=""
    if [[ -n "$package" ]]; then
        package_path="${package//./\/}"
    fi

    # Construct file paths
    local file_path="src/$package_path/$file_name"
    local header_path="src/.include/$package_path/$file_name"
    local c_file="$file_path.c"
    local h_file="$header_path.h"

    # Check if the files already exist
    if [[ -f "$c_file" || -f "$h_file" ]]; then
        echo "File '$file_name' already exists."
        exit 1
    fi

    mkdir -p "src/$package_path"
    mkdir -p "src/.include/$package_path"

    # Create .c and .h files with basic content
    if [[ "$package_path" == "" ]]; then
        echo "#include \"${file_name}.h\"" > "$c_file"
    else
        echo "#include \"${package_path}/${file_name}.h\"" > "$c_file"
    fi

    echo "#ifndef ${file_name^^}_H\n#define ${file_name^^}_H\n/* Header file for $file_name */\n#endif" > "$h_file"
    
    # Update files.json
    jq --arg file "${file_path}.c" '.aux_files += [$file]' files.json > files_tmp.json && mv files_tmp.json files.json
}

# Function to remove a file
remove_file() {
    local file_name="$1"

    local main_file=$(jq -r '.main_file' files.json)
    local file_path="src/${file_name}"
    local header_path="src/.include/${file_name}"

    if [[ "$file_path.c" == "${main_file}" ]]; then
        echo "Cannot remove the main file."
        exit 1
    fi

    local c_file="$file_path.c"
    local h_file="$header_path.h"

    if [[ ! -f "$c_file" ]]; then
        echo "File '$file_name.c' does not exist."
        exit 1
    fi

    read -p "Are you sure you want to remove '$file_name'? This may affect dependencies. (y/n) " confirm
    if [[ "$confirm" == "y" ]]; then
        rm -f "$c_file" "$h_file"
        jq --arg file "${file_path}.c" 'del(.aux_files[] | select(. == $file))' files.json > files_tmp.json && mv files_tmp.json files.json
    else
        echo "File removal aborted."
    fi
}

# Function to edit the main file
edit_main_file() {
    local new_main_file="$1"

    local current_main_file=$(jq -r '.main_file' files.json)

    if [[ ! -f "src/$new_main_file" ]]; then
        echo "The new main file '$new_main_file' does not exist."
        exit 1
    fi

    if [[ "$current_main_file" == "$new_main_file" ]]; then
        echo "The new main file is the same as the current one."
        exit 1
    fi

    read -p "Do you want to remove the old main file or put it in the aux files list? (remove/aux) " action

    if [[ "$action" == "remove" ]]; then
        if [[ "$current_main_file" != "" ]]; then
            rm -f "src/${current_main_file}"
            jq --arg file "src/${current_main_file}" 'del(.aux_files[] | select(. == $file))' files.json > files_tmp.json && mv files_tmp.json files.json
        fi
    elif [[ "$action" == "aux" ]]; then
        jq --arg file "src/$current_main_file" '.aux_files += [$file]' files.json > files_tmp.json && mv files_tmp.json files.json
    else
        echo "Invalid action."
        exit 1
    fi

    # Update the main file to the new one
    update_files_json "$new_main_file"

    if jq -e --arg file "src/$new_main_file" '.aux_files | index($file)' files.json >/dev/null; then
        rm -f "src/${new_main_file}"
    fi
}

# Main script logic
if [[ $# -lt 1 ]]; then
    usage
fi

mode="$1"
shift

case $mode in
    create) create_file "$@" ;;
    remove) remove_file "$@" ;;
    edit-main) edit_main_file "$@" ;;
    install) install_lib "$@" ;;
    *) usage ;;
esac
